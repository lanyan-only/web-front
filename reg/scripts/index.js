window.onload = function(){
	///关于node.js

	///作为一个程序员 你的语言应该能处理什么?
	///javascript

	///基础的数据存储和逻辑操作 
	///处理HTML页面 (独特的功能,大部分语言并不具备)
	
	///浏览器中的js是一门缺少了很多东西的语言
	///1.对操作系统中文件的操作(mp3).
	///2.缺少对进程的操作.
	///3.缺少对网络底层协议的操作.(爬虫)
	///4.缺少对操作系统提供的一些接口的操作.

	///Node.js可以弥补上述缺陷.
	///nodejs.org  ///doc


	///正则表达式

	//正则表达式是用来做文本的搜索替换的

	// 在正则表达式中最重要的三个东西 
	// []  () {} 
	// http://www.baidu.com:8080


	//[] {}




	//  []  代表一个字符范围 [0-9a-z]

	//  对[]的简写
	//  \s  代表所有的空格
	//  \w  [a-zA-Z]
	//  \W  [^a-zA-Z]
	//  \d  [0-9]
	//  \D  [^0-9]

	// {} 代表重复次数
	// {1,}  1次或多次     +
	// {1,3} 至少一次,最多3次
	// {0,}  0次或多次     *

	// var ss = '豫章故郡，洪都新府。星分翼轸（zhěn），地接衡庐。襟三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃（fān）之榻（tà）。雄州雾列，俊采星驰。台隍（huáng）枕（zhěn）夷夏之交，宾主尽东南之美。都督阎（yán）公之雅望，棨（qǐ）戟（jǐ）遥临；宇文新州之懿（yì）范，襜（chān）帷（wéi）暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟（jiāo）起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯（jiàn） 时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨（yǎn）骖（cān）騑（fēi）于上路，访风景于崇阿（ē）。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀（tīng）凫（fú）渚（zhǔ），穷岛屿之萦回；桂殿兰宫，即冈峦之体势。 披绣闼（tà），俯雕甍（méng），山原旷其盈视，川泽纡其骇瞩。闾阎（lǘ yán）扑地，钟鸣鼎食之家；舸（gě）舰弥津，青雀黄龙之舳（通：轴zhú）。云销雨霁（jì），彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（lǐ）之滨，雁阵惊寒，声断衡阳之浦。 遥襟甫畅，逸兴遄（chuán）飞。爽籁发而清风生，纤歌凝而白云遏（è）。睢（suī）园绿竹，气凌彭泽之樽（zūn）；邺（yè）水朱华，光照临川之笔。四美具，二难并。穷睇眄（dì miǎn）于中天，极娱游于暇日。天高地迥（jiǒng），觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会（kuài）于云间。地势极而南溟（míng）深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍（hūn）而不见，奉宣室以何年？ 嗟乎！时运不齐，命途多舛（chuǎn）。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊（shē），扶摇可接；东隅（yú）已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠（guàn）；有怀投笔，慕宗悫（què）之长风。舍簪（zān）笏（hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋（qū）庭，叨（tāo）陪鲤对；今兹捧袂（mèi），喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ 呜乎！胜地不常，盛筵难再；兰亭已矣，梓（zǐ）泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔';
	



	// var ss = '你的，我的，他的，大家的';
	// var reg = /的/g;
	// ss.replace(reg,function(e){
	// 	return e + '家';
	// });

	//正则表达式中的圆括号代表匹配中的一部分

	var ss = 'a010a-34343434,a0357a-3872121';
	var reg = /a(\d{3,4})a/g;
	var ns = ss.replace(reg, function(e,f){
		return '(' + f + ')';
	});
	// console.log(ns);

	var  ss  = '我的，你的。他的：大家的、';
	var  reg = /的([，。：、])/g;

	var dict = {
		'，' : ',',
		'。' : '.',
		'：' : ':',
		'、' : '.',
		'！' : '!',
		'？' : '?'
	};
	var ns = ss.replace(reg,function(e,f){
		return  '的家' + dict[f];
	})
	// console.log(ns);





	//语法规则
	//  [] {} ()

	//  [] 表示 <b>一个</b> 字符 (写在中括号中的东西规定这个字符的范围)
	//  {} 表示字符的重复次数
	//  () 表示匹配结果中的某一部分 (捕获型分组)

	//  \d   \D   \w  \W  \b(单词边界) \s  .(除了换行之外的任意字符)
	//  {2,3} * +


	// 在js中的使用方式
	// String.prototype 

	// String.fromCharCode(); 
	// trim()  trimLeft()  trimRight()  indexOf()  charCodeAt() 
	// endsWith()  startsWith()  toLowerCase() toUpperCase()
	// slice()  subString() subStr()

	// String中可以使用正则表达式的方法
	// search()
	// match()
	// split()
	// replace()

	// js的正则表达式对象有两个方法
	// exec()
	// test()


	// var ss = '[010]-12345678我的家[0357]-1234567';
	// var reg = /\[(\d{3,4})\]-(\d{7,8})/g;
	// var ns = ss.replace(reg,function(a,b,c){
	//  return '(' + b + ')-' + c.split('').reverse().join('');
	// });
	// console.log(ns);


	
	// var ss = '(010)-23231212 &&& (0357)-1234567 &&& (0358)-1134343';
	// var reg = /\((\d{3,4})\)-\d{7,8}/g;
	// var r = true;
	// var aa = [];
	// while ( r ){
	// 	r = reg.exec(ss);
	// 	if(r){
	// 		aa.push(r[1]);
	// 	}
	// }
	// console.log(aa);
	var ss='a@qq.com,b@163.com,c@gmail.com,b@163.com';
	var reg = /@[\w.]+\b/g;
	var r = true;
	var dict = {};
	while ( r ){
		r = reg.exec(ss);
		if(r){
			if( !dict[ r[0] ] ){
				dict[ r[0] ] = 1;
			}else{
				dict[ r[0] ] += 1;
			}
		}
	}
	var max = {index:'',value:-Infinity};
	for(var i in dict){
		if( max.value < dict[i] ){
			max.value = dict[i];
			max.index = i;
		}
	}

	
	


};